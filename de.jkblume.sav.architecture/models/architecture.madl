import "platform:/plugin/org.qualitune.smags.architecture.dsl/resources/StandardTypes.madl";
import "../../SmagRE/models/AdaptationArchitecture.madl";
import "../../SmagRE/models/CommonLib.madl";
import "../../de.jkblume.sav.sensorml/models/sensorml.madl";

namespace "de.jkblume.sav.architecture";

meta architecture SavMetaArchitecture{
	sensor units:

	type libraries:
	port types:
	
	port type ISensor {
		parameter running : Boolean;
		parameter lastEvent : Event;
		
		void start();
		void stop();
		
		requires IRetrieveStrategy[1 to 1];
		requires IProcess[1 to 1];
		
		// helper functions
		String getId();
		Integer getSamplingRate();
		IOPropertyList retrieveOutputStructure();
	}
	
	port type IProcess {
		parameter smlConfiguration : AbstractProcess;
		Object execute(Object input);
	}
	
	port type IAggregateProcess extends IProcess {
		requires IProcess[0 to *];
	}
	
	port type ILearningProcess extends IProcess {
		Boolean buildClassifier();
		void teachCurrentState(Category category);
		void startGesture(Category category);
		void stopGesture(Category category);
		
		requires ISensor[0 to *];
	}
	
	port type IRetrieveStrategy {
		parameter smlConfiguration : AbstractProcess;
		Object retrieveValue();
	}
	
	port type ILogicalRetrieveStrategy extends IRetrieveStrategy {
		requires ISensor[0 to *];
	}
	
	port type IVisualisationStrategy {
		void visualizeEvent(ISensor source, Event event);
		void addSensor(ISensor sensor);
		void removeSensor(ISensor sensor);
	}
		
	component types:
	
	component type SimpleProcess {
		provides IProcess;
	}
	
	component type AggregateProcess {
		provides IAggregateProcess;
	}
	
	component type LearningProcess {
		provides ILearningProcess;
	}
	
	component type TechnicalRetrieveStrategy {
		provides IRetrieveStrategy;
	}
	
	component type LogicalRetrieveStrategy {
		provides ILogicalRetrieveStrategy;
	}
	
	component type Sensor {
		provides ISensor;
	}
	
	component type Visualizer {
		provides IVisualisationStrategy;
		requires ISensor[0 to *];
	}	
			
	sensor types:

}