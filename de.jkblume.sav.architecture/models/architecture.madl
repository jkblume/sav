import "platform:/plugin/org.qualitune.smags.architecture.dsl/resources/StandardTypes.madl";
import "../../SmagRE/models/AdaptationArchitecture.madl";
import "../../SmagRE/models/CommonLib.madl";
import "../../de.jkblume.sav.sensorml/models/sensorml.madl";

namespace "de.jkblume.sav.architecture";

meta architecture SavMetaArchitecture{
	sensor units:

	type libraries:
	
	port types:
		
	port type IProcess {
		parameter smlConfiguration : AbstractProcess;
		IOPropertyList execute(IOPropertyList value);
	}
	
	port type IOrchestratorProcess extends IProcess {
		requires IProcess[0 to *];
	}
	
	port type ISensor {
		parameter smlConfiguration : AbstractPhysicalProcess;
		parameter lastEvent : Event;
		requires IProcess;
		String getId();
		Boolean initialize();
		IOPropertyList retrieveValues();
		void start();
		void stop();
		Boolean isRunning();
	}
	
	event port type IMyPushSensor fires Event extends ISensor{
		void fireUnprocessedValues(IOPropertyList values);
	}
		
	port type IPullReasoner extends ISensor {
		void classify(Long intervalStart, Long intervalEnd);
		void classifySnapshot(Long timestamp);
	}
	
//	event port type IPushReasoner fires Event extends IMyPushSensor {
//		
//	}
	
//	port type ILearningReasoner extends IReasoner {
//		Object translateEvent(Event event);
//		void train();
//		void teachCurrentState(Category category);
//	}
	
	port type IVisualisationStrategy {
		void visualizeEvent(ISensor source, Event event);
		void addSensor(ISensor sensor);
		void removeSensor(ISensor sensor);
	}
		
	component types:
	
	component type TechnicalPushSensor {
		provides IMyPushSensor;
	}
	
	component type TechnicalPullSensor {
		provides ISensor;
	}
	
	component type LogicalPushSensor {
		provides IMyPushSensor;
		requires IMyPushSensor[0 to *];
		requires ISensor[0 to *];
	}
	
	component type LogicalPullSensor {
		provides ISensor;
		requires IMyPushSensor[0 to *];
		requires ISensor[0 to *];
	}
	
	component type PullReasoner {
		provides IPullReasoner;
		requires IMyPushSensor[0 to *];
		requires ISensor[0 to *];
	}
	
	component type Visualizer {
		requires ISensor[0 to *];
		requires IMyPushSensor[0 to *];
		provides IVisualisationStrategy;
	}
		
	sensor types:

}