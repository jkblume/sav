import "platform:/plugin/org.qualitune.smags.architecture.dsl/resources/StandardTypes.madl";
import "../../SmagRE/models/AdaptationArchitecture.madl";
import "../../SmagRE/models/CommonLib.madl";
import "../../de.jkblume.sav.sensorml/models/sensorml.madl";

namespace "de.jkblume.sav.architecture";

meta architecture SavMetaArchitecture{
	sensor units:

	type libraries:
	
	port types:
		
	port type IProcess {
		parameter smlConfiguration : AbstractProcess;
		Boolean validateSmlConfiguration();
		Object execute(Object value);
	}
	
	port type ISensor extends IProcess{
		parameter lastEvent : Event;
		
		void start();
		void stop();
		Boolean isRunning();
		IOPropertyList retrieveValues();
		
		requires IProcess[0 to 1];
		
		// helper functions
		String getId();
		Integer getSamplingRate();
		IOPropertyList retrieveOutputStructure();
	}
	
	port type ILogicalSensor extends ISensor{
		requires ISensor[0 to *];
	}
			
	port type IReasoningStrategy {
		void buildClassifier(List<ISensor> sensors);
		Category classifyCurrentState(IOPropertyList input);
		DataComponent getQualityOfService();
		
		parameter injectorProvided : Boolean;
		parameter extractorProvided : Boolean;
		requires IProcess[0 to *];
	}
	
	port type ISpecificationReasoningStrategy extends IReasoningStrategy {
	
	}
	
	port type ILearningReasoningStrategy extends IReasoningStrategy {
		void startGesture(Category category);
		void stopGesture(Category category);
		void teachCurrentState(Category category);
		void updateClassifier(Object trainingDate);
	}
	
	port type IVisualisationStrategy {
		void visualizeEvent(ISensor source, Event event);
		void addSensor(ISensor sensor);
		void removeSensor(ISensor sensor);
	}
		
	component types:
		
	component type SimpleProcess {
		provides IProcess;
	}
	
	component type AggregateProcess {
		provides IProcess;
		requires IProcess[0 to *];
	}
	
	component type LearningReasoningProcess {
		provides IProcess;
		provides ILearningReasoningStrategy;
	}
	
	component type SpecificationReasoningProcess {
		provides IProcess;
		provides ISpecificationReasoningStrategy;
	}
	
	component type TechnicalSensor {
		provides ISensor;
	}
	
	component type LogicalSensor {
		provides ILogicalSensor;
	}
	
	component type Visualizer {
		requires ISensor[0 to *];
		provides IVisualisationStrategy;
	}
		
	sensor types:

}